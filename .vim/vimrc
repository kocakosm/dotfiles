"------------------------------"
"---------  Settings  ---------"
"------------------------------"

" Set UTF-8 as the default encoding
set encoding=utf-8

" Do not recognize octal numbers for Ctrl-A and Ctrl-X
set nrformats-=octal

" Consider numbers as unsigned
set nrformats+=unsigned

" Disable modeline
set nomodeline

" Do not apply the langmap option to characters that result from a mapping
set nolangremap

" Ignore mappings and options for :mksession and :mkview
set sessionoptions-=options
set viewoptions-=options

" Enable the mouse
set mouse=a

" Hide the mouse when a key is pressed
set mousehide

" Automatically reload files when modified by an external program
set autoread

" Keep 250 lines of command line history
set history=250

" Reduce delay when using escape key in a terminal
set ttimeout
set ttimeoutlen=50

" Milliseconds to wait after nothing is typed to write the swap file and fire the CursorHold event
set updatetime=125

" Allow more than one unsaved buffer
set hidden

" Go to the last used window when jumping to errors with quickfix commands
set switchbuf=uselast

" Enhanced command-line completion
set wildmenu
set wildmode=longest,full
set wildoptions=pum

" Case insensitive command-line completion of file names and directories
set wildignorecase

" Ignore files/directories matching these patterns
set wildignore+=*/.hg/**,*/.git/**
set wildignore+=*.tags,*.orig,*.tar*
set wildignore+=*.png,*.jpg,*.jpeg,*.gif
set wildignore+=*.o,*.pyc,*.pyo,*.class,*.min.*
set wildignore+=*.pdf,*.aux,*.log,*.dvi,*.bbl,*.blg,*.out,*.toc

" Save undo tree to disk
set undofile

" Do not create a swap file by default
set noswapfile

" Do not flush the swap file to disk every time it is written
set swapsync=

" Put all temporary files in a more sensible place
call system#mkdir(system#user_data_dir() . 'vim/swap')
call system#mkdir(system#user_data_dir() . 'vim/undo')
call system#mkdir(system#user_data_dir() . 'vim/info')
call system#mkdir(system#user_data_dir() . 'vim/backup')
let &backupdir=system#user_data_dir() . 'vim/backup/'
let &directory=system#user_data_dir() . 'vim/swap//'
let &undodir=system#user_data_dir() . 'vim/undo/'
let &viminfo="'100,n" . system#user_data_dir() . 'vim/info/viminfo'

" Set the window title
set title
set titlestring=%F\ %m

" Enable true colors support in terminal
set termguicolors

" Don't display the intro message
set shortmess+=I

" Don't give the file info when editing a file
set shortmess+=F

" Don't show 'search hit bottom, continuing at top' messages
set shortmess+=s

" Don't show insert mode completion menu messages
set shortmess+=c

" Don't show 'scanning tags' messages
set shortmess+=C

" Display commands as they are typed
set showcmd

" Always show the status line
set laststatus=2

" Show line numbers
set number

" Use 3 columns for line numbers
set numberwidth=3

" Highlight the line number of the current line
set cursorline
set cursorlineopt=number

" Prettier vertical separators, fold markers...
let &fillchars='vert:│,diff: ,fold: ,foldclose:▸,foldopen:▾,foldsep:│,eob:-,lastline:.'

" Open new windows below the current one
set splitbelow

" Open new windows at the right-hand side of the current one
set splitright

" Stabilize the topline when opening/closing a (horizontal) window
set splitkeep=topline

" Maximum text width (0 means don't cut lines)
set textwidth=0

" Highlight column after 'textwidth' (when > 0)
set colorcolumn=+1

" Don't wrap long lines by default
set nowrap

" Add a ↳ at the start of lines that have been wrapped
let &showbreak='↳ '

" Visually indent wrapped lines
set breakindent

" Shift wrapped line's beginning by 1 character
set breakindentopt=shift:1

" Only wrap at a character in the 'breakat' option
set linebreak

" Do not insert two spaces after a '.', '?' and '!' with a join command
set nojoinspaces

" Show as much as possible of the last line
set display=lastline

" Highlight matching brackets
set showmatch
set matchtime=3

" Disable folding by default
set nofoldenable

" Try to keep 3 lines above and below the cursor
set scrolloff=3

" Side-scroll 5 characters before the screen border
set sidescrolloff=5

" Side-scroll 1 character at a time
set sidescroll=1

" Try to keep the cursor at the current column when jumping to other lines
set nostartofline

" Strings to use in 'list' mode and for the ':list' command
let &listchars='tab:◦·,extends:…,precedes:…,trail:·,nbsp:⎵,eol:¬'

" More powerful backspacing in insert mode
set backspace=indent,eol,start

" Allow <left>/<right> and h/l to wrap the cursor around line borders
set whichwrap=<,>,h,l,[,]

" Enable virtual editing in visual block mode
set virtualedit=block

" Automatic indentation
set autoindent

" Expand tabulations to spaces
set expandtab

" Use 4 characters-wide tabulations by default
set tabstop=4
set smarttab

" Use 4 characters as indentation level by default
set shiftwidth=4

" >> indents to next multiple of 'shiftwidth'
set shiftround

" Files to scan for <c-x><c-k> insert mode completions
set dictionary=/usr/share/dict/british-english
set dictionary+=/usr/share/dict/american-english
set dictionary+=/usr/share/dict/french

" Places to scan for <c-n>, <c-p> and <c-x><c-l> insert mode completions
set complete=.,w,b,u,t,i

" Insert mode completion options
set completeopt=menuone,popup
set completepopup+=border:off

" Don't show more than 15 items in the popup menu
set pumheight=15

" Automatic formatting options
set formatoptions=jncql

" Use system's default clipboards for yanking/pasting
set clipboard=unnamedplus,unnamed

" Case insensitive search
set ignorecase

" Smart case sensitivity (has priority over ignorecase)
set smartcase

" Enable incremental search
set incsearch

" Start diff mode with vertical splits
set diffopt+=vertical

" Use the internal diff with the histogram algorithm
set diffopt+=internal,algorithm:histogram

" When spell-checking a camel cased word, every upper-case character that
" comes after a lower case character is treated as the start of a new word
set spelloptions=camel

" Expression used to print the PostScript produced with :hardcopy
set printexpr=print#to_pdf()

" Enable file type detection
filetype plugin indent on

" Enable syntax highlighting
syntax on

"----------------------------------"
"---------  Autocommands  ---------"
"----------------------------------"

augroup Vimrc
  autocmd!
augroup END

" Command-line window customization
autocmd Vimrc CmdwinEnter [:/?] setlocal nonumber textwidth=0

" Preview window customization
autocmd Vimrc WinEnter * if &previewwindow | setlocal nonumber | endif

" When opening a file, jump to the last known cursor position if possible
function! s:jump_to_last_position() abort
  if line("'\"") >= 1 && line("'\"") <= line("$") && &filetype !~# 'commit'
    execute "normal! g`\""
  endif
endfunction
autocmd Vimrc BufReadPost * call <sid>jump_to_last_position()

" Make read-only mode really read-only
autocmd Vimrc OptionSet readonly let &l:modifiable=!&readonly
autocmd Vimrc BufEnter * ++once let &l:modifiable=!&readonly

"------------------------------"
"---------  Commands  ---------"
"------------------------------"

" Diffs the current buffer and the file it was loaded from
function! s:diff_origin() abort
  if empty(bufname('%'))
    call message#warn('The current buffer has not been loaded from a file')
    return
  endif
  vertical new
  setlocal bufhidden=wipe buftype=nofile nobuflisted noswapfile
  read ++edit #
  let &filetype = getbufvar('#', '&filetype')
  silent 0d_
  setlocal readonly
  diffthis | wincmd p | diffthis
endfunction
command! DiffOrigin call <sid>diff_origin()

"------------------------------"
"---------  Mappings  ---------"
"------------------------------"

" Finer-grained undo
inoremap <silent> <tab> <tab><c-g>u
inoremap <silent> <space> <space><c-g>u
inoremap <silent> <cr> <cr><c-g>u
inoremap <silent> <c-u> <c-g>u<c-u>
inoremap <silent> <c-w> <c-g>u<c-w>

" Y yanks from the cursor to the end of the line
nnoremap <silent> Y y$

" Do not move the cursor after a visual yank
vnoremap <expr>y 'my"' . v:register . 'y`y'

" Duplicate the current line
nnoremap <silent> <c-s-up> m`yyP==``k
nnoremap <silent> <c-s-down> m`yyp==``j
inoremap <silent> <c-s-up> <cmd>normal m`yyP==``k<cr>
inoremap <silent> <c-s-down> <cmd>normal m`yyp==``j<cr>

" <tab> / <shift-tab> navigates between windows in normal mode
nnoremap <silent> <tab> <C-w>w
nnoremap <silent> <s-tab> <C-w>W

" <alt>-<right> switches to the next buffer
noremap <silent> <a-right> <cmd>bn!<cr>
inoremap <silent> <a-right> <cmd>bn!<cr>

" <alt>-<left> switches to the previous buffer
noremap <silent> <a-left> <cmd>bp!<cr>
inoremap <silent> <a-left> <cmd>bp!<cr>

" gp reselects last pasted text
nnoremap <silent> <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Don't lose visual selection when shifting sidewards
xnoremap <silent> < <gv
xnoremap <silent> > >gv

" \<space> toggles spell-checking
nnoremap <silent> <leader><space> <cmd>setlocal spell!<cr>

" <ctrl-l> picks the first suggestion for the last spelling mistake
inoremap <silent> <c-l> <c-g>u<esc>[s1z=`]a<c-g>u
nnoremap <silent> <c-l> [s1z=`]

" Easily replace the word under the cursor or the current visual selection
nnoremap <leader>r :% s/\<<c-r><c-w>\>//g<left><left>
xnoremap <leader>r y:% s/<c-r>"//g<left><left>

" Easier buffer switching
nnoremap <leader>l <cmd>ls<cr>:buffer<space>

" Quit using <c-q>
noremap <silent> <c-q> <cmd>q<cr>
inoremap <silent> <c-q> <cmd>q<cr>
cnoremap <silent> <c-q> <cmd>q<cr>

" Mappings for quickfix & location list
nnoremap <silent> ]c <cmd>cnext<cr>zz
nnoremap <silent> [c <cmd>cprev<cr>zz
nnoremap <silent> ]l <cmd>lnext<cr>zz
nnoremap <silent> [l <cmd>lprev<cr>zz

" Insert mode completion mappings
inoremap <c-space> <c-x><c-o>
imap <c-@> <c-space>
call keymap#conditional_map('i', 'pumvisible()', '<c-space>', '<c-n>')
call keymap#conditional_map('i', 'pumvisible()', '<down>', '<c-n>')
call keymap#conditional_map('i', 'pumvisible()', '<up>', '<c-p>')
call keymap#conditional_map('i', 'pumvisible()', '<esc>', '<c-e>')
call keymap#conditional_map('i', 'pumvisible()', '<cr>', '<c-y>')

"--------------------------------------"
"---------  Built-in plugins  ---------"
"--------------------------------------"

" Disable unused built-in plugins
let g:loaded_2html_plugin=1
let g:loaded_getscriptPlugin=1
let g:loaded_logipat=1
let g:loaded_netrwPlugin=1
let g:loaded_rrhelper=1
let g:loaded_vimballPlugin=1
let g:loaded_matchit=1

" Enable man pages viewer
if exists(':Man') != 2
  runtime ftplugin/man.vim
  cnoreabbrev <expr> man (getcmdtype() ==# ':' && getcmdline() ==# 'man') ? 'Man' : 'man'
endif

" Emulate ntrw's gx
nnoremap <silent> gx <cmd>call system#open(expand('<cWORD>'))<cr>
xnoremap <silent> gx <cmd>call system#open(buffer#selected_text(1))<cr>

"--------------------------------------"
"---------  Personal plugins  ---------"
"--------------------------------------"

" Vstats configuration
xmap <silent> ++ <plug>(vstats)
nmap <silent> ++ ggVG<plug>(vstats)

" Zoom configuration
nmap <silent> <c-w>o <plug>(zoom#toggle)
nmap <silent> <c-w><c-o> <plug>(zoom#toggle)

" Sticky-buffers configuration
let g:sticky_buffers_ignored_buftypes=['help']
let g:sticky_buffers_ignored_filetypes=['dirvish']

" Popterm configuration
nnoremap <silent> <f4> <cmd>PopTermToggle<cr>
inoremap <silent> <f4> <cmd>PopTermToggle<cr>
tnoremap <silent> <f4> <cmd>PopTermToggle<cr>

" Cooler configuration
set hlsearch

"-----------------------------------------"
"---------  Third-party plugins  ---------"
"-----------------------------------------"

call plug#begin(system#user_data_dir() . 'vim/plugins')
Plug 'airblade/vim-rooter'
Plug 'alvan/vim-closetag', {'for': ['xml', 'xsd', 'html', 'xhtml']}
Plug 'andymass/vim-matchup'
" Plug 'ap/vim-css-color', {'for': ['css', 'less', 'scss', 'vim']}
" Plug 'chaoren/vim-wordmotion'
" Plug 'chrisbra/NrrwRgn', {'on': '<plug>NrrwrgnDo'}
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'hrsh7th/vim-vsnip'
" Plug 'jiangmiao/auto-pairs'
Plug 'justinmk/vim-dirvish'
Plug 'kocakosm/hilal'
Plug 'kocakosm/vim-kitondro', has('gui_running') ? {} : {'on': []}
Plug 'lervag/vimtex', {'for': ['tex']}
Plug 'ludovicchabant/vim-gutentags'
" Plug 'mg979/vim-visual-multi'
Plug 'mhinz/vim-signify'
" Plug 'natebosch/vim-lsc'
" Plug 'preservim/nerdtree', {'tag': '*', 'on': 'NERDTreeToggle'}
" Plug 'shime/vim-livedown', {'for': ['markdown'], 'do': 'npm -g install livedown'}
Plug 'thinca/vim-visualstar'
" Plug 'tommcdo/vim-exchange'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
" Plug 'tyru/open-browser.vim', {'on': '<plug>(openbrowser-smart-search)'}
" Plug 'wellle/targets.vim'
Plug 'wincent/terminus', has('gui_running') ? {'on': []} : {}
Plug 'zirrostig/vim-schlepp', {'on': '<plug>Schlepp'}
" Plug 'ryanoasis/vim-devicons', {'tag': 'v0.11.0'}
call plug#end()

for s:plugin in keys(g:plugs)
  let s:plugin_name = substitute(tolower(s:plugin), '^\(n\)\?vim-', '', '')
  let s:plugin_name = substitute(s:plugin_name, '[\.-]\(n\)\?vim$', '', '')
  let s:plugin_conf = system#user_vim_dir() . 'plugins-config/' . s:plugin_name . '.vim'
  if filereadable(s:plugin_conf)
    execute 'source ' . s:plugin_conf
  endif
endfor
