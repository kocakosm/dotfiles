"------------------------------"
"---------  Settings  ---------"
"------------------------------"

" Set UTF-8 as the default encoding
set encoding=utf-8

" Do not recognize octal numbers for Ctrl-A and Ctrl-X
set nrformats-=octal

" Disable modeline
set nomodeline

" Do not apply the langmap option to characters that result from a mapping
set nolangremap

" Ignore mappings and options for :mksession and :mkview
set sessionoptions-=options
set viewoptions-=options

" Enable the mouse
set mouse=a

" Hide the mouse when a key is pressed
set mousehide

" Automatically switch to the directory of the current file
set autochdir

" Automatically reload files when modified by an external program
set autoread

" Automatically save buffer before :next, :make etc...
"set autowrite

" Do not flush the file to disk each time it is written
set nofsync

" Keep 250 lines of command line history
set history=250

" Ask to save modified files before operations like :q
"set confirm

" Reduce delay when using escape key in a terminal
set ttimeout
set ttimeoutlen=50

" Number of milliseconds to wait after nothing is typed to write the swap file
" to disk and trigger the CursorHold autocmd
"set updatetime=1000

" Better display when running in a terminal
set ttyfast

" Don't redraw when running macros
"set lazyredraw

" Allow more than one unsaved buffer
set hidden

" Go to the last used window when jumping to errors with quickfix commands
set switchbuf=uselast

" Enhanced command-line completion
set wildmenu
set wildmode=longest,full

" Case insensitive command-line completion
set wildignorecase

" Don't try to open these files/directories
set wildignore+=*/.hg/**,*/.git/**
set wildignore+=*.tags,*.orig,*.tar*
set wildignore+=*.png,*.jpg,*.jpeg,*.gif
set wildignore+=*.o,*.pyc,*.pyo,*.class,*.min.*
set wildignore+=*.pdf,*.aux,*.log,*.dvi,*.bbl,*.blg,*.out,*.toc

" Create a backup before overwriting a file
set writebackup

" Remove the backup after the file has been successfully written
set nobackup

" Create a swapfile for every file
set swapfile

" Save undo tree to disk
set undofile

" Put all temporary files in a more sensible place
if !has('nvim')
  call system#mkdir(system#USER_DATA_DIR . 'vim/swap')
  call system#mkdir(system#USER_DATA_DIR . 'vim/undo')
  call system#mkdir(system#USER_DATA_DIR . 'vim/info')
  call system#mkdir(system#USER_DATA_DIR . 'vim/backup')
  let &backupdir=system#USER_DATA_DIR . 'vim/backup/'
  let &directory=system#USER_DATA_DIR . 'vim/swap//'
  let &undodir=system#USER_DATA_DIR . 'vim/undo/'
  let &viminfo="'100,n" . system#USER_DATA_DIR . 'vim/info/viminfo'
endif

" Set the window title
set title
set titlestring=%F\ %m

" Enable true colors support in terminal
set termguicolors

" Don't display the intro message
set shortmess+=I

" Don't give the file info when editing a file
set shortmess+=F

" Show search count
set shortmess-=S

" Don't show 'search hit bottom, continuing at top' messages
set shortmess+=s

" Display commands as they are typed
set showcmd

" Show the current mode
"set showmode

" Always show the status line
set laststatus=2

" Show the cursor position
"set ruler

" Show line numbers
set number

" Use 3 columns for line numbers
set numberwidth=3

" Display signs in the number column
"set signcolumn=number

" Prettier vertical separators, fold markers and diff
let &fillchars='vert:│,diff: ,fold:·'
if has('nvim')
  let &fillchars=&fillchars . ',eob:-'
endif

" Open new windows below the current one
set splitbelow

" Open new windows at the right-hand side of the current one
set splitright

" Maximum text width (0 means don't cut lines)
set textwidth=0

" Highlight column after 'textwidth' (when > 0)
set colorcolumn=+1

" Don't wrap long lines by default
set nowrap

" Add a ↪ at the start of lines that have been wrapped
"let &showbreak='↪ '
let &showbreak='↳ '

" Visually indent wrapped lines
set breakindent

" Shift wrapped line's beginning by 1 character
set breakindentopt=shift:1

" Only wrap at a character in the 'breakat' option
set linebreak

" Do not insert two spaces after a '.', '?' and '!' with a join command
set nojoinspaces

" Show as much as possible of the last line
set display=lastline

" Highlight matching brackets
set showmatch
set matchtime=3

" Disable folding by default
set nofoldenable

" Show folding marks
"set foldcolumn=1

" Try to keep 3 lines above and below the cursor
set scrolloff=3

" Side-scroll 5 characters before the screen border
set sidescrolloff=5

" Side-scroll 1 character at a time
set sidescroll=1

" Try to keep the cursor at the current column when jumping to other lines
set nostartofline

" Show tabs, non-printable characters, etc...
let &listchars='tab:▸ ,extends:⧽,precedes:⧼,trail:·,nbsp:⎵,eol:¬'
"let &listchars='tab:┊ '
"let &listchars='trail:•'

" More powerful backspacing in insert mode
set backspace=indent,eol,start

" Allow <left>/<right> and h/l to wrap the cursor around line borders
set whichwrap=<,>,h,l,[,]

" Enable virtual editing in visual block mode
set virtualedit=block

" Automatic indentation
set autoindent

" Expand tabulations to spaces
set expandtab

" Use 4 characters-wide tabulations by default
set tabstop=4
set smarttab

" Use 4 characters as indentation level by default
set shiftwidth=4

" >> indents to next multiple of 'shiftwidth'
set shiftround

" Files to scan for <c-x><c-k> insert mode completions
set dictionary=/usr/share/dict/british-english
set dictionary+=/usr/share/dict/american-english
set dictionary+=/usr/share/dict/french

" Places to scan for <c-n>, <c-p> and <c-x><c-l> insert mode completions
set complete=.,w,b,u,t,i

" Insert mode completion options
if has('nvim')
  set completeopt=menuone,preview
else
  set completeopt=menuone,popup
  set completepopup+=border:off
endif

" Adjust the case of the completion match to the case of the typed text
"set infercase

" Don't show more than 15 items in the popup menu
set pumheight=15

" Automatic formatting options
set formatoptions=jncql

" Use system's default clipboards for yanking/pasting
if has('unnamedplus')
  set clipboard=unnamedplus
endif
set clipboard+=unnamed

" Case insensitive search
set ignorecase

" Smart case sensitivity (has priority over ignorecase)
set smartcase

" Enable incremental search
set incsearch

" Don't highlight search results by default
set nohlsearch

" Start diff mode with vertical splits
set diffopt+=vertical

" Use the internal diff with the histogram algorithm
set diffopt+=internal,algorithm:histogram

" Replace each concealed block with one character
"set conceallevel=1

" Never conceal cursor line
"set concealcursor=

" Enable file type detection
filetype plugin indent on

" Enable syntax highlighting
syntax on

"----------------------------------"
"---------  Autocommands  ---------"
"----------------------------------"

augroup Vimrc
  autocmd!
augroup END

" Highlight the current line in insert mode
" autocmd Vimrc InsertEnter * set cursorline
" autocmd Vimrc InsertLeave * set nocursorline

" Show 'listchars' in all modes except insert mode
" autocmd Vimrc InsertEnter * set nolist
" autocmd Vimrc InsertLeave * set list

" Command-line window customization
autocmd Vimrc CmdwinEnter [:/?] setlocal nonumber textwidth=0

" Preview window customization
autocmd Vimrc WinEnter * if &previewwindow | setlocal nonumber | endif

" When opening a file, jump to the last known cursor position if possible
function! s:jump_to_last_position() abort
  if line("'\"") >= 1 && line("'\"") <= line("$") && &filetype !~# 'commit'
    execute "normal! g`\""
  endif
endfunction
autocmd Vimrc BufReadPost * call <sid>jump_to_last_position()

" Make read-only mode really read-only
autocmd Vimrc OptionSet readonly let &l:modifiable=!&readonly
autocmd Vimrc BufEnter * ++once let &l:modifiable=!&readonly

"------------------------------"
"---------  Commands  ---------"
"------------------------------"

" Diffs the current buffer and the file it was loaded from
function! s:diff_origin() abort
  if empty(bufname('%'))
    call message#warn('The current buffer has not been loaded from a file')
    return
  endif
  vertical new
  setlocal bufhidden=wipe buftype=nofile nobuflisted noswapfile
  read ++edit #
  let &filetype = getbufvar('#', '&filetype')
  silent 0d_
  setlocal readonly
  diffthis | wincmd p | diffthis
endfunction
command! DiffOrigin call <sid>diff_origin()

"------------------------------"
"---------  Mappings  ---------"
"------------------------------"

" Finer-grained undo
inoremap <silent> <tab> <tab><c-g>u
inoremap <silent> <space> <space><c-g>u
inoremap <silent> <cr> <cr><c-g>u
inoremap <silent> <c-u> <c-g>u<c-u>
inoremap <silent> <c-w> <c-g>u<c-w>

" Don't use Ex mode, use Q for formatting.
"noremap Q gq

" Finer-grained scrolling with mouse wheel
"noremap <silent> <scrollwheelup> <c-y><c-y>
"inoremap <silent> <scrollwheelup> <c-o><c-y><c-o><c-y>
"noremap <silent> <scrollwheeldown> <c-e><c-e>
"inoremap <silent> <scrollwheeldown> <c-o><c-e><c-o><c-e>
"noremap <silent> <c-scrollwheelup> <c-y>
"inoremap <silent> <c-scrollwheelup> <c-o><c-y>
"noremap <silent> <c-scrollwheeldown> <c-e>
"inoremap <silent> <c-scrollwheeldown> <c-o><c-e>
"noremap <silent> <s-scrollwheelup> <c-u>
"inoremap <silent> <s-scrollwheelup> <c-o><c-u>
"noremap <silent> <s-scrollwheeldown> <c-d>
"inoremap <silent> <s-scrollwheeldown> <c-o><c-d>

" Make j/k/<up>/<down> move by virtual lines (when not used with a count)
" inoremap <silent> <up> <c-o>gk
" inoremap <silent> <down> <c-o>gj
" noremap <silent> <expr> <up> (v:count == 0 ? 'gk' : 'k')
" noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
" noremap <silent> <expr> <down> (v:count == 0 ? 'gj' : 'j')
" noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')

" Make <home>/<end>/0/^/$ move by virtual lines
" inoremap <silent> <home> <c-o>g<home>
" inoremap <silent> <end> <c-o>g<end>
" noremap <silent> <home> g<home>
" noremap <silent> <end> g<end>
" noremap <silent> 0 g0
" noremap <silent> ^ g^
" noremap <silent> $ g$

" K splits the current line (opposite of J)
" nnoremap <silent> K i<cr><esc>

" Y yanks from the cursor to the end of the line
nnoremap <silent> Y y$

" Do not move the cursor after a visual yank
vnoremap <expr>y 'my"' . v:register . 'y`y'

" Duplicate the current line
nnoremap <silent> <c-s-up> m`yyP==``k
nnoremap <silent> <c-s-down> m`yyp==``j
inoremap <silent> <c-s-up> <c-o>:<c-u>normal m`yyP==``k<cr>
inoremap <silent> <c-s-down> <c-o>:<c-u>normal m`yyp==``j<cr>

" <ctrl>-t opens a new tab
"noremap <silent> <c-t> :tabnew<cr>
"inoremap <silent> <c-t> <c-o>:tabnew<cr>

" <tab> / <shift-tab> navigates between windows in normal mode
nnoremap <silent> <tab> <C-w>w
nnoremap <silent> <s-tab> <C-w>W

" <alt>-<up> switches to the next tab
"noremap <silent> <a-up> gt
"inoremap <silent> <a-up> <c-o>gt

" <alt>-<down> switches to the previous tab
"noremap <silent> <a-down> gT
"inoremap <silent> <a-down> <c-o>gT

" <alt>-<right> switches to the next buffer
noremap <silent> <a-right> :bn!<cr>
inoremap <silent> <a-right> <c-o>:bn!<cr>

" <alt>-<left> switches to the previous buffer
noremap <silent> <a-left> :bp!<cr>
inoremap <silent> <a-left> <c-o>:bp!<cr>

" <space> centers the current line
"noremap <silent> <space> zz

" gp reselects last pasted text
nnoremap <silent> <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Don't lose visual selection when shifting sidewards
xnoremap <silent> < <gv
xnoremap <silent> > >gv

" \s sorts the current visual selection
"xnoremap <silent> <leader>s :sort<cr>

" \h toggles search results highlighting
"nnoremap <silent> <leader>h :setlocal hlsearch!<cr>

" \<space> toggles spell-checking
nnoremap <silent> <leader><space> :setlocal spell!<cr>

" <ctrl-l> picks the first suggestion for the last spelling mistake
inoremap <silent> <c-l> <c-g>u<esc>[s1z=`]a<c-g>u
nnoremap <silent> <c-l> [s1z=`]

" Easily replace the word under the cursor or the current visual selection
nnoremap <leader>r :% s/\<<c-r><c-w>\>//g<left><left>
xnoremap <leader>r y:% s/<c-r>"//g<left><left>

" Easier buffer switching
nnoremap <leader>l :ls<cr>:buffer<space>

" Quit using <c-q>
noremap <silent> <c-q> :q<cr>
inoremap <silent> <c-q> <esc>:q<cr>
cnoremap <silent> <c-q> <esc>:q<cr>

" Mappings for quickfix & location list
nnoremap <silent> ]c :cnext<cr>zz
nnoremap <silent> [c :cprev<cr>zz
nnoremap <silent> ]l :lnext<cr>zz
nnoremap <silent> [l :lprev<cr>zz

" 'Smart' <home>
noremap <silent> <expr> <home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'

" Block select with control-click-and-drag
"noremap <c-leftmouse> <leftmouse><esc><c-v>
"noremap <c-leftdrag> <leftdrag>

" Insert mode completion mappings
inoremap <c-space> <c-x><c-o>
imap <c-@> <c-space>
call keymap#conditional_map('i', 'pumvisible()', '<c-space>', '<c-n>')
call keymap#conditional_map('i', 'pumvisible()', '<down>', '<c-n>')
call keymap#conditional_map('i', 'pumvisible()', '<up>', '<c-p>')
call keymap#conditional_map('i', 'pumvisible()', '<esc>', '<c-e>')
call keymap#conditional_map('i', 'pumvisible()', '<cr>', '<c-y>')

"--------------------------------------"
"---------  Built-in plugins  ---------"
"--------------------------------------"

" Disable unused built-in plugins
let g:loaded_2html_plugin=1
let g:loaded_getscriptPlugin=1
let g:loaded_logipat=1
let g:loaded_netrwPlugin=1
let g:loaded_rrhelper=1
let g:loaded_vimballPlugin=1
let g:loaded_matchit=1

" Enable matchit
" if !exists('g:loaded_matchit')
"   packadd! matchit
" endif

" Enable man pages viewer
if exists(':Man') != 2
  runtime ftplugin/man.vim
endif

" Netrw configuration
if get(g:, 'loaded_netrwPlugin', 0)
  " emulate ntrw's gx
  nnoremap <silent> gx :call system#open(expand('<cWORD>'))<cr>
  xnoremap <silent> gx :<c-u> call system#open(buffer#selected_text(1))<cr>
else
  let g:netrw_browsex_viewer='firefox'
  let g:netrw_home=system#USER_DATA_DIR . 'vim/netrw'
  call system#mkdir(g:netrw_home)
endif

"--------------------------------------"
"---------  Personal plugins  ---------"
"--------------------------------------"

" Vstats.vim configuration
xmap <silent> ++ <plug>(vstats)
nmap <silent> ++ ggVG<plug>(vstats)

" Zoom.vim configuration
nmap <silent> <c-w>o <plug>(zoom#toggle)
nmap <silent> <c-w><c-o> <plug>(zoom#toggle)

" Cursor-hold-delay.vim configuration
set updatetime=10000
let g:cursor_hold_delay=100

" Sticky-buffers.vim configuration
let g:sticky_buffers_ignored_buftypes=['help']
let g:sticky_buffers_ignored_filetypes=['dirvish']

"-----------------------------------------"
"---------  Third-party plugins  ---------"
"-----------------------------------------"

call plug#begin(system#USER_DATA_DIR . 'vim/plugins')
Plug 'hrsh7th/vim-vsnip'
Plug 'Lenovsky/nuake', {'on': 'Nuake'}
Plug 'airblade/vim-rooter'
Plug 'andymass/vim-matchup'
Plug 'ap/vim-css-color', {'for': ['css', 'less', 'scss', 'vim']}
Plug 'chaoren/vim-wordmotion'
Plug 'chrisbra/NrrwRgn', {'on': '<plug>NrrwrgnDo'}
Plug 'ctrlpvim/ctrlp.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align', {'on': '<plug>(EasyAlign)'}
Plug 'justinmk/vim-dirvish'
Plug 'kocakosm/hilal'
Plug 'kocakosm/vim-kitondro', has('gui_running') ? {} : {'on': []}
Plug 'lervag/vimtex', {'for': ['tex']}
Plug 'ludovicchabant/vim-gutentags'
Plug 'mg979/vim-visual-multi'
Plug 'mhinz/vim-signify'
Plug 'natebosch/vim-lsc'
Plug 'preservim/nerdtree', {'tag': '*', 'on': 'NERDTreeToggle'}
Plug 'romainl/vim-cool'
Plug 'shime/vim-livedown', {'for': ['markdown'], 'do': 'npm -g install livedown'}
Plug 'sukima/xmledit', {'for': ['xml', 'xsd', 'html', 'xhtml']}
Plug 'thinca/vim-visualstar'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tyru/open-browser.vim', {'on': '<plug>(openbrowser-smart-search)'}
Plug 'wellle/targets.vim'
Plug 'wincent/terminus', has('gui_running') ? {'on': []} : {}
Plug 'zirrostig/vim-schlepp', {'on': '<plug>Schlepp'}
Plug 'ryanoasis/vim-devicons', {'tag': 'v0.11.0'}
call plug#end()

for s:plugin in keys(g:plugs)
  let s:plugin_name = substitute(tolower(s:plugin), '^\(n\)\?vim-', '', '')
  let s:plugin_name = substitute(s:plugin_name, '[\.-]\(n\)\?vim$', '', '')
  let s:plugin_conf = system#USER_VIM_DIR . 'plugins-config/' . s:plugin_name . '.vim'
  if filereadable(s:plugin_conf)
    execute 'source ' . s:plugin_conf
  endif
endfor
